log using "U:\stata\output\Stata_IS_Log.txt", replace
*Bhargav Pappu*
*FIN 4010*
*Code for Stata IS*

clear
set obs 1
local firm="GWRE"
gen page=fileread("https://www.zacks.com/stock/quote/GWRE/income-statement")
gen tic="`firm'"
local path="U:\stata\output\stata_`firm'_is.xlsx"
local is_beg=strpos(page, "<!-- z2_income_statement start -->")
display "`is_beg'"
local is_end=strpos(page, "<!-- End Annual Income Statement Tab -->")
display "`is_end'"
local is_length=`is_end'-`is_beg'
display "`is_length'"
replace page=substr(page, `is_beg', `is_length')
display "`is_length'"
replace page = stritrim(page)
*remove tabs: char(9)
replace page=subinstr(page, char(9), "", .)
*remove line feeds: char(10) is a line feed
replace page=subinstr(page, char(10), "", .)
*remove carriage returns: char(13)
replace page=subinstr(page, char(13), "", .)
*remove double quotes: char(34)
replace page=subinstr(page, char(34),"", .)
*remove commas:
replace page=subinstr(page, ",", "", .)
*fix &'s
replace page=subinstr(page, "&amp;", "&", .)
*remove some html that is unnecessary
replace page=subinstr(page, "<span>", "", .)
replace page=subinstr(page, "</span>", "", .)
replace page=subinstr(page, "td class=alpha>", "", .)
replace page=subinstr(page,"</a></td>","</td>",.)
*pull out the part of the page that has the fiscal year dates information
gen fyear=substr(page,strpos(page,"<thead>"),strpos(page,"</thead>")-strpos(page,"<thead>"))
replace page=substr(page, strpos(page, "<tr><Sales<"), ustrrpos(page, "</tr>")+5-strpos(page, "<tr><Sales<"))
local length=strlen(page)
display "`length'"
*create a new variable "item_#" that will capture each block of data (variable name and last 5 years of data)
*create a counter for the number of balance sheet items
local item_n=0
*loops through the page (by character) and create a new variable each time you encounter a new row in the balance sheet
*<tr> demarcates each new table row
forvalues i=1/`length' {
if substr(page,`i',4)=="<tr>" {
local item_n=`item_n'+1
gen item_`item_n'=substr(page,`i',.)
}
}
*no longer need the original web page
drop page
*loop through your item variables to limit the text to the variable name and the numerical data
*the end of the table row is marked with"</tr>"
forvalue i=1/`item_n' {
replace item_`i'=substr(item_`i',1,strpos(item_`i',"</tr>")-1)
}
*some of the data has clickable links (cash, assets, etc.), need to remove these hyperlinks
*loop through each data item block
*then loop through the text for that item block and remove the hyperlinks until they are all gone (strpos=0)
forvalue i=1/`item_n' {
while strpos(item_`i',"<a href")~=0 {
replace item_`i'=regexr(item_`i',"<a href([^<]*)>","")
}
}
*the items for table headings (total liabilities and shareholders equity) do no contain data and are not needed, they have "th class" in their text block
*this code just makes these items variables missing ("")
forvalues i=1/`item_n'{
replace item_`i'="" if strpos(item_`i',"th class=")~=0
}
*this pulls out the variables names and uses them as the variable label, just so we don't forget what the items represent
forvalues i=1/`item_n' {
local temp=substr(item_`i',strpos(item_`i',"<tr>")+4,strpos(item_`i',"</td>")-(strpos(item_`i',"<tr>")+4))
label var item_`i' "`temp'"
replace item_`i'=substr(item_`i',strpos(item_`i',"</td>")+5,.)
}
*now we need to split the numerical data by year
*this code will change the data html tags to identify in which table column is that data, <td_2> 1,000 </td_2> means 2nd column of data
forvalues i=1/`item_n' {
local td_count=0
while strpos(item_`i',"<td>")~=0 {
local td_count=`td_count'+1
replace item_`i'=subinstr(item_`i',"<td>","<td_`td_count'>",1)
replace item_`i'=subinstr(item_`i',"</td>","</td_`td_count'>",1)
}
}
*duplicate the data to get a total of 5 rows (years), you do this because that is how many years of data the table has on the website
expand 5
*create a counter variable that notes to which column of data (on the webpage) the dataset's row corresponds
gen yrnum=_n
*now go through each item and strip out the numerical data from the appropriate table column tag
*first just do this for the first item to demonstrate
replace item_1=substr(item_1,strpos(item_1,"<td_1>")+6,strpos(item_1,"</td_1>")-(strpos(item_1,"<td_1>")+6)) if yrnum==1
replace item_1=substr(item_1,strpos(item_1,"<td_2>")+6,strpos(item_1,"</td_2>")-(strpos(item_1,"<td_2>")+6)) if yrnum==2
replace item_1=substr(item_1,strpos(item_1,"<td_3>")+6,strpos(item_1,"</td_3>")-(strpos(item_1,"<td_3>")+6)) if yrnum==3
replace item_1=substr(item_1,strpos(item_1,"<td_4>")+6,strpos(item_1,"</td_4>")-(strpos(item_1,"<td_4>")+6)) if yrnum==4
replace item_1=substr(item_1,strpos(item_1,"<td_5>")+6,strpos(item_1,"</td_5>")-(strpos(item_1,"<td_5>")+6)) if yrnum==5
*now loop through the remaining items
forvalues i=2/`item_n' {
replace item_`i'=substr(item_`i',strpos(item_`i',"<td_1>")+6,strpos(item_`i',"</td_1>")-(strpos(item_`i',"<td_1>")+6)) if yrnum==1
replace item_`i'=substr(item_`i',strpos(item_`i',"<td_2>")+6,strpos(item_`i',"</td_2>")-(strpos(item_`i',"<td_2>")+6)) if yrnum==2
replace item_`i'=substr(item_`i',strpos(item_`i',"<td_3>")+6,strpos(item_`i',"</td_3>")-(strpos(item_`i',"<td_3>")+6)) if yrnum==3
replace item_`i'=substr(item_`i',strpos(item_`i',"<td_4>")+6,strpos(item_`i',"</td_4>")-(strpos(item_`i',"<td_4>")+6)) if yrnum==4
replace item_`i'=substr(item_`i',strpos(item_`i',"<td_5>")+6,strpos(item_`i',"</td_5>")-(strpos(item_`i',"<td_5>")+6)) if yrnum==5
}
*now we need to get the dates out of the fyear data variable
*first, remove some of the html that is not helpful
replace fyear=subinstr(fyear,"<thead><tr><th class=center></th>","",.)
*create a fyear counter so that we can create html data tags to track to which year the dataset's row corresponds
local fyr_count=0
*now loop through the html and change the <th class=> </th> tags to <fyr_#> </fyr_#> to track the corresponding years
while strpos(fyear,"<th class=>")~=0{
local fyr_count=`fyr_count'+1
replace fyear=subinstr(fyear,"<th class=>","<fyr_`fyr_count'>",1)
replace fyear=subinstr(fyear,"</th>","</fyr_`fyr_count'>",1)
}
*now strip out the fyear year data
replace fyear=substr(fyear,strpos(fyear,"<fyr_1>")+7,strpos(fyear,"</fyr_1>")-(strpos(fyear,"<fyr_1>")+7)) if yrnum==1
replace fyear=substr(fyear,strpos(fyear,"<fyr_2>")+7,strpos(fyear,"</fyr_2>")-(strpos(fyear,"<fyr_2>")+7)) if yrnum==2
replace fyear=substr(fyear,strpos(fyear,"<fyr_3>")+7,strpos(fyear,"</fyr_3>")-(strpos(fyear,"<fyr_3>")+7)) if yrnum==3
replace fyear=substr(fyear,strpos(fyear,"<fyr_4>")+7,strpos(fyear,"</fyr_4>")-(strpos(fyear,"<fyr_4>")+7)) if yrnum==4
replace fyear=substr(fyear,strpos(fyear,"<fyr_5>")+7,strpos(fyear,"</fyr_5>")-(strpos(fyear,"<fyr_5>")+7)) if yrnum==5
drop yrnum
*destring your financial data so that you have numerical data instead of string data
forvalue i=1/`item_n' {
destring item_`i', force replace
}
*destring the fyear variable
gen fyear2=date(fyear,"MDY", 2100)
format fyear2 %td
drop fyear
rename fyear2 fyear
gen sales=item_1
gen cogs=item_2
gen gp=item_3
gen sga=item_4
gen ebit=item_5
gen nonop=item_6
gen xint=item_7
gen ebt=item_8
gen txt=item_9
gen mii=item_10
gen invg=item_11
gen oi=item_12
gen icop=item_13
gen discop=item_14
gen ni=item_15
gen ebitda=item_17
gen is_dep=item_18
gen avg_csho=item_21
gen is_epsd1=item_22
gen is_epsd2=item_23
label var sales "Sales"
label var cogs "Cost of Goods Sold"
label var gp "Gross Profit"
label var sga "Selling & Administrative & Depr. & Amort Expense"
label var ebit "Income After Depreciation & Amortization"
label var nonop "Non-Operating Income"
label var xint "Interest Expense"
label var ebt "Pretax Income"
label var txt "Income Taxes"
label var mii "Minority Interest"
label var invg "Investment Gains/Losses"
label var oi "Other Income/Charges"
label var icop "Income from Cont. Operations"
label var discop "Extras & Discontinued Operations"
label var ni "Net Income (GAAP)"
label var ebitda "Income before Depreciation & Amortization"
label var is_dep "Depreciation & Amortization (Cash Flow)"
label var avg_csho "Average Shares"
label var is_epsd1 "Diluted EPS Before Non-Recurring Items"
label var is_epsd2 "Diluted Net EPS (GAAP)"
drop item_*
*export to excel
export excel using "`path'", sheet("IS_data") firstrow(var) replace
export excel using "`path'", sheet("IS_data_label") sheetreplace firstrow(varlabels)
log close